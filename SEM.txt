################################SEM#############################
library(piecewiseSEM)
library(lme4)
library(nlme)
library(lmerTest)
library(dplyr)
library(tidyverse)
data0 <- read.csv("nifH_env.csv")
colnames(data0)
data1 <- data0[,c(11:17)]
data_scaled <- as.data.frame(scale(data1))
data2 <- data0[,c(3,4,18:20)]
data3 <- cbind(data_scaled,data2)
data<-na.omit(data3)
sapply(data, class)

mod.list3=psem(lme(pcoa1~ MAT +MAP +NDVI+T_SILT, random=~1|site,data= data, na.action=na.omit),
               lme(Richness~ NDVI +MAP  + T_SILT+pH, random=~1|site,data= data, na.action=na.omit),
               lme(logabundance~  T_SILT +pH +MAT +MAP +NDVI , random=~1|site, data = data, na.action=na.omit),
               
               lme(NDVI~ T_SILT +MAT +MAP + pH +TN , random=~1|site,data=data, na.action=na.omit),
               
               lme(pH~MAP, random=~1|site,data=data, na.action=na.omit),
               lme(T_SILT~MAT, random=~1|site,data=data, na.action=na.omit),
               lme(TN~MAP +MAT, random=~1|site,data=data, na.action=na.omit),
               
               T_SILT%~~%pH,
               TN %~~%pH,
               TN %~~%T_SILT,
              
               pcoa1%~~%Richness,
               logabundance %~~%Richness,
               logabundance %~~%pcoa1,
               data= data
)
summary(mod.list3,conserve = TRUE)
AIC(mod.list3)




 ############################direct effect and indirect effect###############
kk1 <- summary(mod.list3, .progressBar = F)
kk2 <- kk1$coefficients[,-(3:6)]
kk3 <- as.data.frame(kk2)
kk4 <- kk3[!grepl("~~", kk3$Predictor), ]
kk4

result1 <- kk4 %>%
  dplyr::relocate(
    from   = Predictor,
    to     = Response,
    weight = Std.Estimate,
    p      = P.Value
  )
data <-result1 

calculateDirectEffects <- function(data, factors) {
  direct_effects <- numeric(nrow(data))
  for (i in 1:nrow(data)) {
    if (paste(data$from[i], data$to[i], sep = "_") %in% factors) {
      direct_effects[i] <- data$weight[i]
    } else {
      direct_effects[i] <- 0
    }
  }
  non_zero_rows <- direct_effects != 0
  direct_effects <- direct_effects[non_zero_rows]
  from_to <- paste(data$from[non_zero_rows], "→", data$to[non_zero_rows])
  direct_effects_df <- data.frame(
    from_to = from_to,
    Direct_Effect = direct_effects
  )
  
  return(direct_effects_df)
}
generateDirectEffectFactors <- function(data) {
  unique_direct_combinations <- unique(paste(data$from, data$to, sep = "_"))
  from_factors <- unique(data$from)
  to_factors <- unique(data$to)
  direct_factors <- paste(rep(from_factors, each = length(to_factors)), rep(to_factors, length(from_factors)), sep = "_")
  
  return(direct_factors)
}
direct_factors <- generateDirectEffectFactors(data)
direct_effects_result <- calculateDirectEffects(data, direct_factors)
print(direct_effects_result)
data <- result1  
unique_from <- unique(data$from)
unique_to <- unique(data$to)
paths <- expand.grid(from = unique_from, to = unique_to)
paths <- split(paths, seq(nrow(paths)))
paths <- lapply(paths, function(x) c(as.character(x$from), as.character(x$to), "logabundance"))
calculateIndirectEffects <- function(data, from_factor, through_factor, to_factor) {
  through_weight <- data$weight[data$from == from_factor & data$to == through_factor]
  to_weight <- data$weight[data$from == through_factor & data$to == to_factor]
  if (length(through_weight) == 0 | length(to_weight) == 0) {
    message(paste("Skipping invalid path:", from_factor, "→", through_factor, "→", to_factor))
    return(NULL)
  }
  
  indirect_effect <- through_weight * to_weight
  
  return(indirect_effect)
}
indirect_effects_df <- data.frame(from_to = character(), Indirect_Effect = numeric())
for (path in paths) {
  from_factor <- path[1]
  through_factor <- path[2]
  to_factor <- path[3]
  
  indirect_effect <- calculateIndirectEffects(data, from_factor, through_factor, to_factor)
  if (!is.null(indirect_effect)) {
    from_to <- paste(from_factor, through_factor, to_factor, sep = " → ")
    indirect_effects_df <- rbind(indirect_effects_df, data.frame(from_to = from_to, Indirect_Effect = indirect_effect))
  }
}
print(indirect_effects_df)
indirect_effects_df <- indirect_effects_df
calculate_total_indirect_effect <- function(data) {
    total_indirect_effect <- data %>%
    mutate(
      start_pattern = sub(" → .*", "", from_to),
      end_pattern = sub(".* → ", "", from_to)
    ) %>%
    group_by(start_pattern, end_pattern) %>%
    summarise(total_indirect_effect = sum(Indirect_Effect), .groups = "drop") %>%
    ungroup() %>%
    arrange(start_pattern, end_pattern) %>%
    mutate(from_to = paste0(start_pattern, " → ", end_pattern)) %>%
    select(from_to, total_indirect_effect)
  
  return(total_indirect_effect)
}
result_total_indirect_effect <- calculate_total_indirect_effect(indirect_effects_df)
print(result_total_indirect_effect)
print(direct_effects_result)
print(indirect_effects_df)
print(result_total_indirect_effect)
direct_effects_result <- direct_effects_result
indirect_effects_df <- indirect_effects_df
total_indirect_effect_df <- as.data.frame(result_total_indirect_effect)
total_effects_df <- bind_rows(direct_effects_result, indirect_effects_df, total_indirect_effect_df)
print(total_effects_df)
data <- total_effects_df
data_processed <- data %>%
  group_by(from_to) %>%
  summarise(Direct_Effect = sum(Direct_Effect, na.rm = TRUE),
            Indirect_Effect = sum(Indirect_Effect, na.rm = TRUE),
            total_indirect_effect = sum(total_indirect_effect, na.rm = TRUE))
print(data_processed)
data_processed2 <- data_processed %>%
  mutate(Total_Effect = Direct_Effect + total_indirect_effect)
print(data_processed2)
df_filtered1 <- data_processed2 %>%
  filter(grepl("logabundance$", from_to))
df_filtered1
data_frame <- as.data.frame(df_filtered1)
filtered_data1 <- data_frame %>%
  filter(Indirect_Effect == 0)
print(filtered_data1)
filtered_data2 <- filtered_data1[,-(3)]
filtered_data2
data_frame <- as.data.frame(filtered_data2)
data_frame$from_to_clean <- sub(" .*", "", data_frame$from_to)
kk4 <- print(data_frame[, c("from_to_clean", "Direct_Effect", "total_indirect_effect", "Total_Effect")])
kk4 
library(ggplot2)
data_frame <- as.data.frame(kk4 )
data_long <- pivot_longer(data_frame, 
                          cols = c(Direct_Effect, total_indirect_effect, Total_Effect),
                          names_to = "Effect_Type", 
                          values_to = "Effect_Value")
data_long$from_to_clean <- factor(data_long$from_to_clean,
                                  levels = c("MAP","MAT","TN","T_SILT","pH","NDVI"))
data_long$Effect_Type <- factor(data_long$Effect_Type,
                                levels = c("Direct_Effect", "total_indirect_effect", "Total_Effect"))
p <- ggplot(data_long, aes(x = from_to_clean, y = Effect_Value)) +
  geom_bar(aes(fill = Effect_Type), stat = "identity", color = "black", size = 0.2,
           position = position_dodge(width = 0.7), width = 0.7) +
    scale_y_continuous(
    limits = c(NA, NA),
    expand = c(0.02, 0.02), 
    breaks = seq(-0.7, 0.7, 0.2) 
  ) +
    scale_fill_manual(
    values = c("#BD6263", "#F5AE6B", "#4387B5"),
    breaks = c("Direct_Effect", "total_indirect_effect", "Total_Effect")
  ) +
    theme_classic() +
  theme(
    text = element_text(family = "Arial", size = 7), 
    panel.grid = element_blank(), 
    #panel.border = element_rect(fill = NA, colour = 'black', size = 0.2),  
    panel.background = element_rect(fill = '#FFFFFF'),
    plot.title = element_text(size = 7, hjust = 0.5), 
    plot.subtitle = element_text(size = 7, hjust = 0.5), 
    axis.text = element_text(size = 7, color = 'black'), 
    axis.title = element_text(size = 7, color = 'black'),
    axis.text.x = element_text(angle = 0, hjust = 1), 
    axis.ticks = element_line(size = 0.2, color = "black"),  
    axis.line.x = element_line(size = 0.2, color = "black"),  
    axis.line.y = element_line(size = 0.2, color = "black"),  
    legend.position = "bottom"
  ) +
    geom_hline(yintercept = 0, linetype = "solid", color = "black", size = 0.2) +
    labs(x = NULL, y = "Standardized effect on Richness")
print(p)
